'
'      FILE:   AuthenticationService.cs.
'
' COPYRIGHT:   Copyright 2009 
'              Infralution
'
Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Xml
Imports System.IO
Imports System.Security.Cryptography
Imports System.Net

''' <summary>
''' Defines a programatic interface to the Authentication Web Service
''' </summary>
''' <remarks>
''' Based on code auto-generated by Microsoft.VSDesigner.   The actual web service method calls are encrypted
''' using public key (RSA) encryption.   Web service calls that are restricted to the product owner are signed
''' using the private key (RSA) parameters to validate that the caller is legitimate.
''' </remarks>
#If ILS_PUBLIC_CLASS Then
<System.Web.Services.WebServiceBindingAttribute(Name:="AuthenticationServiceSoap", [Namespace]:="http://infralution.com/webservices")> _
Public Class AuthenticationService
#Else
<System.Web.Services.WebServiceBindingAttribute(Name:="AuthenticationServiceSoap", [Namespace]:="http://infralution.com/webservices")> _
Class AuthenticationService
#End If
    Inherits System.Web.Services.Protocols.SoapHttpClientProtocol


#Region "Public Methods"

    ''' <summary>
    ''' Create a new instance of the Authentication Service
    ''' </summary>
    Public Sub New()
        MyBase.New()
        ' ensure that if the system is using an ISA Proxy Server we can connect through it
        '
        Try
            Me.Proxy = WebRequest.GetSystemWebProxy()
            Me.Proxy.Credentials = CredentialCache.DefaultCredentials
        Catch ' ignore errors when running under partial trust
        End Try
    End Sub

    ''' <summary>
    ''' Set/Get the URL of the Authentication Service
    ''' </summary>
    Public Shadows Property Url() As String
        Get
            Return MyBase.Url
        End Get
        Set(ByVal value As String)
            If MyBase.Url <> value Then

                MyBase.Url = value

                ' turn off Expect100Continue functionality for the service point - 
                ' as this causes "Error 417: Expectation Failed" with some proxy servers
                '
                Dim sServicePoint As ServicePoint = ServicePointManager.FindServicePoint(New Uri(value))
                sServicePoint.Expect100Continue = False

            End If
        End Set
    End Property

    ''' <summary> 
    ''' Authenticate a license key on the given computer 
    ''' </summary> 
    ''' <param name="parameters">The license parameters used to encrypt the method parameters</param> 
    ''' <param name="computer">The computer to authenticate the key on</param> 
    ''' <param name="authenticationKey">The license key to authenticate</param> 
    ''' <param name="applicationData">Data to register with the authentication</param> 
    ''' <returns>An XML string containing the authenticated license information</returns> 
    Public Function Authenticate(ByVal parameters As AuthenticatedLicenseParameters, _
                                 ByVal computer As String, _
                                 ByVal authenticationKey As String, _
                                 ByVal applicationData As String) As String
        Me.Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server 
        ' 
        Dim args As New Hashtable()
        args("computer") = computer
        args("authenticationKey") = authenticationKey
        If applicationData IsNot Nothing Then
            args("applicationData") = applicationData
        End If
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim resultData As Byte() = Authenticate(parameters.ProductName, sessionKey, encryptedArgs)
        Dim result As String = Nothing
        If resultData IsNot Nothing Then
            result = LicenseUtilities.DecryptText(tripleDes, resultData)
            If result = "MaxAuthenticationsExceeded" Then
                Throw New AuthenticationsExceededException()
            End If
        End If
        Return result
    End Function

    ''' <summary>
    ''' Get the ProductInfo from a license key without authenticating it
    ''' </summary>
    ''' <param name="parameters">The license parameters used to encrypt the method parameters</param>
    ''' <param name="authenticationKey">The authentication key to authenticate</param>
    ''' <returns>The ProductInfo from the key or null if the key is not valid</returns>
    Public Function GetProductInfo(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String) As String
        Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server
        '
        Dim args As New Hashtable()

        args("authenticationKey") = authenticationKey
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)

        ' call the server method
        '
        Dim encryptedData As Byte() = GetProductInfo(parameters.ProductName, sessionKey, encryptedArgs)

        If encryptedData Is Nothing Then
            Return Nothing
        End If

        ' now read the data
        '
        Dim memoryStream As New MemoryStream(encryptedData)
        Dim cryptoStream As New CryptoStream(memoryStream, tripleDes.CreateDecryptor(), CryptoStreamMode.Read)
        Dim result As String = Nothing
        If encryptedData IsNot Nothing Then
            result = LicenseUtilities.DecryptText(tripleDes, encryptedData)
        End If
        Return result
    End Function

    ''' <summary>
    ''' Get the AuthenticationData for a license key without authenticating it
    ''' </summary>
    ''' <param name="parameters">The license parameters used to encrypt the method parameters</param>
    ''' <param name="authenticationKey">The authentication key to authenticate</param>
    ''' <returns>The AuthenticationData for the key or null if the key is not valid</returns>
    Public Function GetAuthenticationData(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String) As String
        Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server
        '
        Dim args As New Hashtable()

        args("authenticationKey") = authenticationKey
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)

        ' call the server method
        '
        Dim encryptedData As Byte() = GetAuthenticationData(parameters.ProductName, sessionKey, encryptedArgs)

        If encryptedData Is Nothing Then
            Return Nothing
        End If

        ' now read the data
        '
        Dim memoryStream As New MemoryStream(encryptedData)
        Dim cryptoStream As New CryptoStream(memoryStream, tripleDes.CreateDecryptor(), CryptoStreamMode.Read)
        Dim result As String = Nothing
        If encryptedData IsNot Nothing Then
            result = LicenseUtilities.DecryptText(tripleDes, encryptedData)
        End If
        Return result
    End Function

    ''' <summary>
    ''' Check if a license key is still authenticated for a given computer
    ''' </summary>
    ''' <param name="parameters">The license parameters used to encrypt the method parameters</param>
    ''' <param name="licenseKey">The decrypted license key to check (Note this is NOT the authentication key)</param>
    ''' <param name="computer">The computer to check</param>
    ''' <returns>True if the license key is authenticated on the given computer</returns>
    Public Function IsAuthenticated(ByVal parameters As AuthenticatedLicenseParameters, ByVal licenseKey As String, ByVal computer As String) As Boolean
        Me.Url = parameters.AuthenticationServerURL
        
        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()
        
        ' encrypt the arguments to send to the server
        '
        Dim args As New Hashtable()
        args("licenseKey") = licenseKey
        args("computer") = computer
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Return IsAuthenticated(parameters.ProductName, sessionKey, encryptedArgs)
    End Function

    ''' <summary> 
    ''' Return the number of remaining authentications for the given authentication key 
    ''' </summary> 
    ''' <param name="parameters">The license parameters used to encrypt the method parameters</param> 
    ''' <param name="authenticationKey">The license key to get the remaining authentications for</param> 
    ''' <returns>The number of remaining authentications</returns> 
    Public Function RemainingAuthentications(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String) As Integer
        Me.Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server 
        ' 
        Dim args As New Hashtable()
        args("authenticationKey") = authenticationKey
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Return RemainingAuthentications(parameters.ProductName, sessionKey, encryptedArgs)
    End Function

    ''' <summary> 
    ''' Set the Authentication Limits for the given license key 
    ''' </summary> 
    ''' <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param> 
    ''' <param name="authenticationKey">The license key to set the limits for</param> 
    ''' <param name="maxAuthentications">The maximum number of authentications allowed</param> 
    Public Sub SetAuthenticationLimits(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String, ByVal maxAuthentications As Integer)
        Url = parameters.AuthenticationServerURL
        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server 
        ' 
        Dim args As New Hashtable()
        args("authenticationKey") = authenticationKey
        args("maxAuthentications") = maxAuthentications.ToString()

        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim signature As Byte() = parameters.SignData(encryptedArgs)

        SetAuthenticationLimits(parameters.ProductName, sessionKey, encryptedArgs, signature)
    End Sub

    ''' <summary>
    ''' Set the Authentication Data for the given license key
    ''' </summary>
    ''' <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
    ''' <param name="authenticationKey">The license key to set the limits for</param>
    ''' <param name="authenticationData">The authentication data for the license key</param>
    Public Sub SetAuthenticationData(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String, ByVal authenticationData As String)
        Url = parameters.AuthenticationServerURL
        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server
        '
        Dim args As New Hashtable()
        args("authenticationKey") = authenticationKey
        args("authenticationData") = authenticationData

        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim signature As Byte() = parameters.SignData(encryptedArgs)

        SetAuthenticationData(parameters.ProductName, sessionKey, encryptedArgs, signature)
    End Sub

    ''' <summary> 
    ''' Delete the authentication for the given license key/computer combination 
    ''' </summary> 
    ''' <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param> 
    ''' <param name="authenticationKey">The license key to delete the authentications for</param> 
    ''' <param name="computer">The computer to delete authentications for</param> 
    Public Sub DeleteAuthentication(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String, ByVal computer As String)
        Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server 
        ' 
        Dim args As New Hashtable()
        args("authenticationKey") = authenticationKey
        args("computer") = computer
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim signature As Byte() = parameters.SignData(encryptedArgs)

        DeleteAuthentication(parameters.ProductName, sessionKey, encryptedArgs, signature)
    End Sub

    ''' <summary> 
    ''' Delete the all authentications (on all computers) for the given license key 
    ''' </summary> 
    ''' <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param> 
    ''' <param name="authenticationKey">The license key to delete the authentications for</param> 
    Public Sub DeleteAllAuthentications(ByVal parameters As AuthenticatedLicenseParameters, ByVal authenticationKey As String)
        Url = parameters.AuthenticationServerURL

        Dim tripleDes As New TripleDESCryptoServiceProvider()
        tripleDes.GenerateKey()
        tripleDes.GenerateIV()

        ' encrypt the arguments to send to the server 
        ' 
        Dim args As New Hashtable()
        args("authenticationKey") = authenticationKey
        Dim sessionKey As String = LicenseUtilities.EncryptKeys(parameters.ServerRSAProvider, tripleDes)
        Dim encryptedArgs As Byte() = LicenseUtilities.EncryptValues(tripleDes, args)
        Dim signature As Byte() = parameters.SignData(encryptedArgs)

        DeleteAllAuthentications(parameters.ProductName, sessionKey, encryptedArgs, signature)
    End Sub

#End Region

#Region "Raw Web Service methods"


    ''' <summary>
    ''' Raw web service interface to authenticate a license key
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <returns>License XML encrypted using the session key</returns>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/Authenticate", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Function Authenticate(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
        Dim results() As Object = Me.Invoke("Authenticate", New Object() {productName, sessionKey, encryptedArgs})
        Return CType(results(0), Byte())
    End Function

    ''' <summary>
    ''' Raw web service interface to get ProductInfo for a license key without authenticating
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <returns>String data encrypted using the session key</returns>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/GetProductInfo", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Function GetProductInfo(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
        Dim results() As Object = Me.Invoke("GetProductInfo", New Object() {productName, sessionKey, encryptedArgs})
        Return CType(results(0), Byte())
    End Function

    ''' <summary>
    ''' Raw web service interface to get AuthenticationData for a license key without authenticating
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <returns>String data encrypted using the session key</returns>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/GetAuthenticationData", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Function GetAuthenticationData(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
        Dim results() As Object = Me.Invoke("GetAuthenticationData", New Object() {productName, sessionKey, encryptedArgs})
        Return CType(results(0), Byte())
    End Function

    ''' <summary>
    ''' Raw web service interface to check if a license key is still authenticated on a given computer
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <returns>True if the license key is authenticated</returns>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/IsAuthenticated", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Function IsAuthenticated(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs As Byte()) As Boolean
        Dim results As Object() = Me.Invoke("IsAuthenticated", New Object() {productName, sessionKey, encryptedArgs})
        Return CBool((results(0)))
    End Function

    ''' <summary>
    ''' Raw web service interface to return the number of remaining authentications for a license key
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <returns>The number of remaining authentications</returns>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/RemainingAuthentications", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Function RemainingAuthentications(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte) As Integer
        Dim results() As Object = Me.Invoke("RemainingAuthentications", New Object() {productName, sessionKey, encryptedArgs})
        Return CType(results(0), Integer)
    End Function

    ''' <summary>
    ''' Raw web service interface to set authentication limits for a license key
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <param name="signature">RSA signature of method arguments - used to validate the caller</param>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/SetAuthenticationLimits", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Sub SetAuthenticationLimits(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal signature() As Byte)
        Me.Invoke("SetAuthenticationLimits", New Object() {productName, sessionKey, encryptedArgs, signature})
    End Sub

    ''' <summary>
    ''' Raw web service interface to set authentication data for a license key
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <param name="signature">RSA signature of method arguments - used to validate the caller</param>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/SetAuthenticationData", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Sub SetAuthenticationData(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal signature() As Byte)
        Me.Invoke("SetAuthenticationData", New Object() {productName, sessionKey, encryptedArgs, signature})
    End Sub

    ''' <summary>
    ''' Raw web service interface to delete an authentication
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <param name="signature">RSA signature of method arguments - used to validate the caller</param>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/DeleteAuthentication", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Sub DeleteAuthentication(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal signature() As Byte)
        Me.Invoke("DeleteAuthentication", New Object() {productName, sessionKey, encryptedArgs, signature})
    End Sub

    ''' <summary>
    ''' Raw web service interface to delete all authentications for license key
    ''' </summary>
    ''' <param name="productName">The name of the product</param>
    ''' <param name="sessionKey">RSA encrypted session key</param>
    ''' <param name="encryptedArgs">Method arguments encrypted using session key</param>
    ''' <param name="signature">RSA signature of method arguments - used to validate the caller</param>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://infralution.com/webservices/DeleteAllAuthentications", RequestNamespace:="http://infralution.com/webservices", ResponseNamespace:="http://infralution.com/webservices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
    Public Sub DeleteAllAuthentications(ByVal productName As String, ByVal sessionKey As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal encryptedArgs() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal signature() As Byte)
        Me.Invoke("DeleteAllAuthentications", New Object() {productName, sessionKey, encryptedArgs, signature})
    End Sub


#End Region

End Class
